{"version":3,"sources":["img/favorite-white.svg","img/favorite.svg","img/comment_icon.svg","components/Post/styles.js","components/IconeComContador/IconeComContador.js","components/SecaoComentario/SecaoComentario.js","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostContainer","styled","div","PostHeader","PostFooter","UserPhoto","img","PostPhoto","CommentContainer","IconeContainer","IconeComContador","props","alt","src","icone","onClick","onClickIcone","valorContador","InputComment","input","SecaoComentario","useState","inputValue","setInputValue","className","placeholder","value","onChange","event","target","enviarComentario","Post","curtido","setCurtido","numeroCurtidas","setNumeroCurtidas","comentando","setComentando","numeroComentarios","setNumeroComentarios","comentarios","setComentarios","iconeCurtida","iconeCoracaoPreto","iconeCoracaoBranco","caixaDeComentario","comentario","listaDeComentarios","map","fotoUsuario","nomeUsuario","fotoPost","iconeComentario","AppContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,o/BCEpC,IAAMC,EAAgBC,IAAOC,IAAV,KAMbC,EAAaF,IAAOC,IAAV,KAOVE,EAAaH,IAAOC,IAAV,KAQVG,EAAYJ,IAAOK,IAAV,KAOTC,EAAYN,IAAOK,IAAV,KAITE,EAAmBP,IAAOC,IAAV,K,iIC/B7B,IAAMO,EAAiBR,IAAOC,IAAV,KAeLQ,MAPf,SAA0BC,GACzB,OAAO,kBAACF,EAAD,KACN,yBAAKG,IAAK,QAASC,IAAKF,EAAMG,MAAOC,QAASJ,EAAMK,eACpD,2BAAIL,EAAMM,iB,6PCXZ,IAAMT,EAAmBP,IAAOC,IAAV,KAMhBgB,EAAejB,IAAOkB,MAAV,KA2BHC,EAtBS,SAACT,GAAW,IAAD,EAEEU,mBAAS,IAFX,mBAE3BC,EAF2B,KAEfC,EAFe,KAQlC,OACC,kBAAC,EAAD,KACC,kBAACL,EAAD,CACCM,UAAW,mBACXC,YAAa,gBACbC,MAAOJ,EACPK,SAVwB,SAACC,GAC3BL,EAAcK,EAAMC,OAAOH,UAW1B,4BAAQX,QAAS,WAAOJ,EAAMmB,iBAAiBR,KAA/C,Y,mDCqDYS,EAzEF,SAACpB,GAAW,IAAD,EAEQU,oBAAS,GAFjB,mBAEfW,EAFe,KAENC,EAFM,OAGsBZ,mBAAS,GAH/B,mBAGfa,EAHe,KAGCC,EAHD,OAIcd,oBAAS,GAJvB,mBAIfe,EAJe,KAIHC,EAJG,OAK4BhB,mBAAS,GALrC,mBAKfiB,EALe,KAKIC,EALJ,OAMgBlB,mBAAS,CAAC,KAN1B,mBAMfmB,EANe,KAMFC,EANE,KA6BhBC,EAAeV,EAAWW,IAAsBC,IAEhDC,EAAoBT,EAExB,kBAAC,EAAD,CAAiBN,iBAXM,SAACgB,GACxB,IAAMC,EAAkB,sBAAOP,GAAP,CAAoBM,IAE5CL,EAAeM,GACfV,GAAc,GACdE,EAAqBD,EAAoB,MAUzCE,EAAYQ,KAAI,SAAAF,GACd,OACE,kBAACtC,EAAD,KACE,2BAAIsC,OAMZ,OACE,kBAAC9C,EAAD,KACE,kBAACG,EAAD,KACE,kBAACE,EAAD,CAAWQ,IAAKF,EAAMsC,YAAarC,IAAK,sBACxC,2BAAID,EAAMuC,cAGZ,kBAAC3C,EAAD,CAAWM,IAAKF,EAAMwC,SAAUvC,IAAK,mBAErC,kBAACR,EAAD,KACE,kBAAC,EAAD,CACEU,MAAO4B,EACP1B,aAlDe,WACjBgB,GACFC,GAAYD,GACZG,EAAkBD,EAAiB,KAEnCD,GAAYD,GACZG,EAAkBD,EAAiB,KA6C/BjB,cAAeiB,IAGjB,kBAAC,EAAD,CACEpB,MAAOsC,IACPpC,aA9CkB,WACxBqB,GAAeD,IA8CTnB,cAAeqB,KAGlBO,I,wKC1EP,IAAMQ,EAAepD,IAAOC,IAAV,KAoBHoD,EAbH,WACV,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,CACEH,YAAa,aACbD,YAAa,8BACbE,SAAU,oCCLEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1676831c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favorite-white.042aa417.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite.4c67d875.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment_icon.de299b47.svg\";","import styled from \"styled-components\"\n\nexport const PostContainer = styled.div `\n    border: 1px solid gray;\n    width: 300px;\n    margin-bottom: 10px;\n`\n\nexport const PostHeader = styled.div `\n    height: 40px;\n    display: flex;\n    align-items: center;\n    padding-left: 10px;\n`\n\nexport const PostFooter = styled.div `\n    height: 40px;\n    display: flex;\n    align-items: center;\n    padding: 0 10px;\n    justify-content: space-between;\n`\n\nexport const UserPhoto = styled.img`\n    height: 30px;\n    width: 30px;\n    margin-right: 10px;\n    border-radius: 50%;\n`\n\nexport const PostPhoto = styled.img`\n    width: 100%;\n`\n\nexport const CommentContainer = styled.div`\n    margin-left: 10px;\n`","import React from 'react'\nimport styled from \"styled-components\"\n\nconst IconeContainer = styled.div`\n\tdisplay: flex;\n\n\timg {\n\t\tmargin-right: 5px;\n\t}\n`\n\nfunction IconeComContador(props) {\n\treturn <IconeContainer>\n\t\t<img alt={'Icone'} src={props.icone} onClick={props.onClickIcone}/>\n\t\t<p>{props.valorContador}</p>\n\t</IconeContainer>\n}\n\nexport default IconeComContador","import React, {useState} from 'react'\nimport styled from \"styled-components\"\n\nconst CommentContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    padding: 5px;\n`\n\nconst InputComment = styled.input `\n    width: 100%;\n    margin-right: 5px;\n`\n\nconst SecaoComentario = (props) => {\n\n\tconst [inputValue, setInputValue] = useState(\"\");\n\n\tconst onChangeComentario = (event) => {\n\t\tsetInputValue(event.target.value);\n\t};\n\n\treturn (\n\t\t<CommentContainer>\n\t\t\t<InputComment\n\t\t\t\tclassName={'input-comentario'}\n\t\t\t\tplaceholder={'Comentário'}\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={onChangeComentario}\n\t\t\t/>\n\t\t\t<button onClick={() => {props.enviarComentario(inputValue) }} >Enviar</button>\n\t\t</CommentContainer>\n\t)\n}\n\n\nexport default SecaoComentario","import React, { useState } from 'react'\nimport { PostContainer, PostHeader, UserPhoto, PostPhoto, PostFooter, CommentContainer } from './styles'\n\nimport IconeComContador from '../IconeComContador/IconeComContador'\nimport SecaoComentario from '../SecaoComentario/SecaoComentario'\n\nimport iconeCoracaoBranco from '../../img/favorite-white.svg'\nimport iconeCoracaoPreto from '../../img/favorite.svg'\nimport iconeComentario from '../../img/comment_icon.svg'\n\nconst Post = (props) => {\n\n  const [curtido, setCurtido] = useState(false);\n  const [numeroCurtidas, setNumeroCurtidas] = useState(0);\n  const [comentando, setComentando] = useState(false);\n  const [numeroComentarios, setNumeroComentarios] = useState(0);\n  const [comentarios, setComentarios] = useState([''])\n\n  const onClickCurtida = () => {\n    if (curtido) {\n      setCurtido(!curtido);\n      setNumeroCurtidas(numeroCurtidas - 1)\n    } else {\n      setCurtido(!curtido);\n      setNumeroCurtidas(numeroCurtidas + 1)\n    }\n  };\n\n  const onClickComentario = () => {\n    setComentando(!comentando)\n  };\n\n  const enviarComentario = (comentario) => {\n    const listaDeComentarios = [...comentarios, comentario]\n\n    setComentarios(listaDeComentarios);\n    setComentando(false);\n    setNumeroComentarios(numeroComentarios + 1)\n  }\n  const iconeCurtida = curtido ? (iconeCoracaoPreto) : (iconeCoracaoBranco);\n\n  const caixaDeComentario = comentando ? (\n    // Componente com o input e botão de enviar novo comentario. Import dele na linha 5.\n    <SecaoComentario enviarComentario={enviarComentario}/>\n  ) : (\n    // Funcao map sendo feita na propriedade comentarios do estado. Ou seja, está sendo pego todos os\n    // comentários do estado para serem renderizados na tela, dentro do componente CommentContainer \n    comentarios.map(comentario => {\n      return (\n        <CommentContainer>\n          <p>{comentario}</p>\n        </CommentContainer>\n      )\n    })\n  )\n\n  return (\n    <PostContainer>\n      <PostHeader>\n        <UserPhoto src={props.fotoUsuario} alt={'Imagem do usuario'}/>\n        <p>{props.nomeUsuario}</p>\n      </PostHeader>\n\n      <PostPhoto src={props.fotoPost} alt={'Imagem do post'}/>\n\n      <PostFooter>\n        <IconeComContador\n          icone={iconeCurtida}\n          onClickIcone={onClickCurtida}\n          valorContador={numeroCurtidas}\n        />\n\n        <IconeComContador\n          icone={iconeComentario}\n          onClickIcone={onClickComentario}\n          valorContador={numeroComentarios}\n        />\n      </PostFooter>\n      {caixaDeComentario}\n    </PostContainer>\n  )\n}\n\nexport default Post","import React from 'react';\nimport Post from './components/Post/Post';\nimport styled from \"styled-components\"\n\nconst AppContainer = styled.div `\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst App = () => {\n  return (\n    <AppContainer>\n      <Post\n        nomeUsuario={'Usuário'}\n        fotoUsuario={'https://picsum.photos/50/50'}\n        fotoPost={'https://picsum.photos/200/150'}\n      />\n    </AppContainer>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}