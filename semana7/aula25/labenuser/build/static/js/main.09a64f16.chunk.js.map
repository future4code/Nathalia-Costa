{"version":3,"sources":["Components/Home.js","Components/Users.js","App.js","serviceWorker.js","index.js"],"names":["DivHome","styled","div","BotaoSalvar","button","Home","state","nameValue","emailValue","onChangeName","event","setState","target","value","onChangeEmail","onClickCriarUser","body","name","email","axios","post","headers","Authorization","then","resposta","window","alert","catch","error","console","log","response","placeholder","onChange","this","onClick","React","Component","DivLinha","Linha","BotaoDeletar","Users","usuarios","pegarUser","get","data","onClickDelete","userId","delete","usuario","map","user","onclick","id","Botao","App","currentPage","onClickNextPage","nextPage","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+jBAIA,IAAMA,EAAUC,IAAOC,IAAV,KAOPC,EAAcF,IAAOG,OAAV,KAyDFC,E,4MAlDXC,MAAQ,CACJC,UAAW,GACXC,WAAY,I,EAGhBC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEJ,UAAWG,EAAME,OAAOC,S,EAG5CC,cAAgB,SAAAJ,GACZ,EAAKC,SAAS,CAAEH,WAAYE,EAAME,OAAOC,S,EAG7CE,iBAAmB,WAEf,IAAMC,EAAO,CACTC,KAAM,EAAKX,MAAMC,UACjBW,MAAO,EAAKZ,MAAME,YAEtBW,IAAMC,KAAK,sEAAuEJ,EAAM,CACpFK,QAAS,CACLC,cAAe,2BAEpBC,MAAK,SAAAC,GACJC,OAAOC,MAAM,qCACdC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,UAClBN,OAAOC,MAAM,gCAGjB,EAAKf,SAAS,CAAEJ,UAAW,GAAIC,WAAY,M,uDAK3C,OACI,6BACI,oCACA,kBAACR,EAAD,KACI,yCACA,2BAAOgC,YAAa,OAAQC,SAAUC,KAAKzB,aAAcI,MAAOqB,KAAK5B,MAAMC,YAC3E,0CACA,2BAAOyB,YAAa,QAASC,SAAUC,KAAKpB,cAAeD,MAAOqB,KAAK5B,MAAME,aAC7E,kBAACL,EAAD,CAAagC,QAASD,KAAKnB,kBAA3B,gB,GA5CDqB,IAAMC,W,8YCbzB,IAAMC,EAAWrC,IAAOC,IAAV,KAKRqC,EAAQtC,IAAOC,IAAV,KAMLsC,EAAevC,IAAOG,OAAV,KA6DHqC,E,4MApDXnC,MAAQ,CACJoC,SAAU,I,EAOdC,UAAY,WACRxB,IAAMyB,IAAI,sEAAuE,CAC7EvB,QAAS,CACLC,cAAe,2BAEpBC,MAAK,SAACQ,GACL,EAAKpB,SAAS,CAAE+B,SAAUX,EAASc,UACpClB,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAMG,c,EAI1Be,cAAgB,SAAAC,GACZ5B,IAAM6B,OAAN,8EAAoFD,GAAU,CAC1F1B,QAAS,CACLC,cAAe,2BAEpBC,MAAK,SAAAQ,GACJN,OAAOC,MAAM,uBACb,EAAKiB,eACNhB,OAAM,SAAAC,GACLH,OAAOC,MAAM,gB,kEAxBjBQ,KAAKS,c,+BA4BC,IAAD,OACCM,EAAUf,KAAK5B,MAAMoC,SAASQ,KAAI,SAAAC,GACpC,OACI,kBAACZ,EAAD,KACI,2BAAIY,EAAKlC,MACT,kBAACuB,EAAD,CAAcY,QAAS,kBAAM,EAAKN,cAAcK,EAAKE,MAArD,SAKZ,OACI,kBAACf,EAAD,KACI,2CACCW,O,GAhDGb,IAAMC,W,qMChB1B,IAAMiB,EAAQrD,IAAOG,OAAV,KA8BImD,E,4MApBbjD,MAAQ,CACNkD,YAAa,Q,EAGfC,gBAAkB,WAChB,IAAMC,EAAsC,SAA3B,EAAKpD,MAAMkD,YAAyB,OAAS,OAE9D,EAAK7C,SAAS,CAAE6C,YAAaE,K,uDAI7B,OACE,yBAAKC,UAAU,OACb,kBAACL,EAAD,CAAOnB,QAASD,KAAKuB,iBAArB,6BAC4B,SAA3BvB,KAAK5B,MAAMkD,YAAyB,kBAAC,EAAD,MAAW,kBAAC,EAAD,W,GAftCpB,IAAMC,WCHJuB,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8C,c","file":"static/js/main.09a64f16.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components'\r\n\r\nconst DivHome = styled.div`\r\n    display: grid;\r\n    gap: 8px;\r\n    justify-content: center;\r\n    \r\n`;\r\n\r\nconst BotaoSalvar = styled.button`\r\n    border-radius: 20px;\r\n    width: 80px;\r\n    justify-self: center;\r\n`;\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        nameValue: \"\",\r\n        emailValue: \"\"\r\n    };\r\n\r\n    onChangeName = event => {\r\n        this.setState({ nameValue: event.target.value });\r\n    };\r\n\r\n    onChangeEmail = event => {\r\n        this.setState({ emailValue: event.target.value });\r\n    };\r\n\r\n    onClickCriarUser = () => {\r\n\r\n        const body = {\r\n            name: this.state.nameValue,\r\n            email: this.state.emailValue\r\n        };\r\n        axios.post('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users', body, {\r\n            headers: {\r\n                Authorization: \"nathalia-costa-julian\"\r\n            }\r\n        }).then(resposta => {\r\n            window.alert(\"Usuário criado com sucesso!\");\r\n        }).catch(error => {\r\n            console.log(error.response);\r\n            window.alert(\"Erro ao criar usuário!\")\r\n        });\r\n\r\n        this.setState({ nameValue: '', emailValue: '' })\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h1>Home</h1>\r\n                <DivHome>\r\n                    <label>Nome: </label>\r\n                    <input placeholder={'Nome'} onChange={this.onChangeName} value={this.state.nameValue}></input>\r\n                    <label>Email: </label>\r\n                    <input placeholder={'Email'} onChange={this.onChangeEmail} value={this.state.emailValue}></input>\r\n                    <BotaoSalvar onClick={this.onClickCriarUser}>Salvar</BotaoSalvar>\r\n                </DivHome>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components'\r\n\r\nconst DivLinha = styled.div`\r\n    display: grid;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Linha = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`;\r\n\r\nconst BotaoDeletar = styled.button`\r\n    width: 25px;\r\n    height: 25px;\r\n    border-radius: 10px;\r\n`;\r\n\r\n\r\nclass Users extends React.Component {\r\n\r\n    state = {\r\n        usuarios: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.pegarUser();\r\n    };\r\n\r\n    pegarUser = () => {\r\n        axios.get('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users', {\r\n            headers: {\r\n                Authorization: \"nathalia-costa-julian\"\r\n            }\r\n        }).then((response) => {\r\n            this.setState({ usuarios: response.data })\r\n        }).catch((error) => {\r\n            console.log(error.response)\r\n        })\r\n    };\r\n\r\n    onClickDelete = userId => {\r\n        axios.delete(`https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${userId}`, {\r\n            headers: {\r\n                Authorization: \"nathalia-costa-julian\"\r\n            }\r\n        }).then(response => {\r\n            window.alert(\"Usuário deletado\");\r\n            this.pegarUser();\r\n        }).catch(error => {\r\n            window.alert(\"Deu erro\");\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const usuario = this.state.usuarios.map(user => {\r\n            return (\r\n                <Linha>\r\n                    <p>{user.name}</p>\r\n                    <BotaoDeletar onclick={() => this.onClickDelete(user.id)}>X</BotaoDeletar>\r\n                </Linha>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <DivLinha>\r\n                <h2>USUÁRIOS</h2>\r\n                {usuario}\r\n            </DivLinha>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","import React from 'react';\nimport Home from './Components/Home'\nimport Users from './Components/Users'\nimport './App.css';\nimport styled from 'styled-components'\n\nconst Botao = styled.button`\n  display: flex;\n  justify-content: flex-start;\n  gap: 8px;\n  width: 150px;\n  height: 50px;\n  text-align: center;\n`;\n\nclass App extends React.Component {\n  state = {\n    currentPage: \"HOME\"\n  };\n\n  onClickNextPage = () => {\n    const nextPage = this.state.currentPage === \"HOME\" ? \"LIST\" : \"HOME\";\n\n    this.setState({ currentPage: nextPage });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Botao onClick={this.onClickNextPage}> --> Próxima Pagina</Botao>\n        {this.state.currentPage === \"HOME\" ? <Home /> : <Users />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}